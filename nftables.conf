flush ruleset

table inet main_filter {
	chain input {
		type filter hook input priority 0; policy drop;
		iif "lo" accept
		# accept only non-fragmented packets
		ip frag-off 0x4000 counter accept
		# ICMP ping dealt with separately to rate limit
		ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate 2/second accept
		ip6 nexthdr icmpv6 icmpv6 type echo-request counter drop
		ip protocol icmp icmp type echo-request limit rate 2/second accept
		ip protocol icmp icmp type echo-request counter drop
		ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, echo-reply, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept
		ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept
		ct state established,related accept
		ct state invalid drop
		ip protocol igmp accept
		tcp dport { ssh, http, https } ct state new accept
	}
	chain forward {
		type filter hook forward priority 0; policy accept;
	}
	chain output {
		type filter hook output priority 0; policy accept;
	}
}

table ip dos_protect4 {
	set deepsix4 {
		type ipv4_addr
		timeout 1m
		gc-interval 2h
	}
	chain input {
		type filter hook input priority 0; #policy drop;
		meta iifname "internal" accept
		ip saddr @deepsix4 counter drop
		tcp dport http meter http1 { ip saddr limit rate over 10/second } set update ip saddr @deepsix4 drop
	}
}

table ip6 dos_protect6 {
	set deepsix6 {
		type ipv6_addr
		timeout 1m
		gc-interval 2h
	}
	chain input {
		type filter hook input priority 0; #policy drop;
		meta iifname "internal" accept
		ip6 saddr @deepsix6 counter drop
		tcp dport http meter http1 { ip6 saddr limit rate over 10/second } set update ip6 saddr @deepsix6 drop
	}
}
